# This file has ben automatically generated by stubgen
# DO NOT EDIT
#
module TensorStream
  module OpStub
<% TensorStream::OpMaker.each_op do |op|%>
    ##
<% op.description.each do |line|%>    # <%= line %>
<%end%>    #
    #<% if op.supports_broadcasting? %> This operation supports broadcasting
    #<% end %>
    # Params:
<% op.parameters.each do |param| %>    # +<%= param[:name] %>+:: <%= param[:description]%><%if param[:validate]%> (of type <%= param[:validate] %>)<%end%>
<% end %>    #
    # Options:
<% op.options.each do |k, v| %>    # +:<%= k %>+:: <%= v[:description]%><% if v[:default_value] != :nil %> default (<%= v[:default_value] %>)<%end%>
<%end%>    def <%= op.operation.to_s %>(<%= (op.expand_params(true) + op.expand_options(true)).join(', ') %>)
<% op.parameters.select { |p| p[:validate] }.each do |p|%>
      check_allowed_types(<%= p[:name]%>, TensorStream::Ops::<%= p[:validate] %>)
<% end %>
<% if op.data_type_coercion? %>      <%= op.expand_params(false).join(', ') %> = apply_data_type_coercion(<%= op.expand_params(false).join(', ') %>)<% end %>
<% if op.check_types? %>      check_data_types(<%= op.expand_params(false).join(', ') %>)<% end %>
<% op.custom.each do |c| %>      <%= c %>
<%end%>      _op(:<%= op.operation %>, <%= (op.expand_params(false) + op.options_call).join(', ') %>)
    end

<% op.aliases.each do |a|%>
    alias_method :<%= a %>, :<%= op.operation %><%end%>
<% end %>
  end
end